@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject AuditService AuditService
@inject IDispatcher Dispatcher
@inject IState<PlayersState> PlayersState

<div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
    <h3 class="mb-0">Detonate</h3>
    <small class="text-muted">
        Makes the target player spontaneously explode.
    </small>
    <EditForm Model="@playerId" OnValidSubmit="@detonateSubmitted" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputSelect @bind-Value="playerId.UniqueId" class="form-select">
                <option selected disabled>Select a player</option>

                @if (Connection.PlayerDetails != null)
                {
                    <option value="0">- Everybody -</option>

                    foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                    {
                        string? playerName = connectionPlayerDetail.Value.PlayerName;
                        if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                        {
                            playerName = playerSummary.Nickname;
                        }
                        <option value="@connectionPlayerDetail.Key">@playerName</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-success form-control">Detonate</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly GenericPlayerIdModel playerId = new();

    private async Task detonateSubmitted()
    {
        try
        {
            if (playerId.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.Detonate(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key);
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                Toast.ShowSuccess("All players detonated", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Detonated all players");
                return;
            }

            await RconService.Detonate(ApiKey.ApiKey, Connection.ServerId, playerId.UniqueId!.Value);
            Toast.ShowSuccess("Player detonated", "Player cheat executed");
            await AuditService.Add(Connection.ServerId, $"Detonated player {playerId.UniqueId!.Value}");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }
}
