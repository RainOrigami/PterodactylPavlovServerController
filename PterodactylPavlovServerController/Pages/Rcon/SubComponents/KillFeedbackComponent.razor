@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject AuditService AuditService
@inject IDispatcher Dispatcher
@inject IState<PlayersState> PlayersState

<div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
    <h3 class="mb-0">Kill Feedback</h3>
    <small class="text-muted">
        Sets weather kills are displayed in the killfeed or not.
    </small>
    <EditForm Model="@feedback" OnValidSubmit="@feedbackSubmitted" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <button type="submit" class="btn btn-outline-success form-control" @onclick="@(() => feedback.Enable = true)">Enable</button>
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-danger form-control" @onclick="@(() => feedback.Enable = false)">Disable</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly GenericEnableModel feedback = new();

    private async Task feedbackSubmitted()
    {
        try
        {
            await RconService.KillFeedback(ApiKey.ApiKey, Connection.ServerId, feedback.Enable!.Value);
            Toast.ShowSuccess("Kill feedback has been updated", "Game cheat executed");
            await AuditService.Add(Connection.ServerId, $"Updated kill feedback to {feedback.Enable!.Value}");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }
}
