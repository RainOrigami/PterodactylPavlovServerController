@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject AuditService AuditService
@inject IDispatcher Dispatcher
@inject IState<PlayersState> PlayersState

<div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
    <h3 class="mb-0">Set vitality</h3>
    <small class="text-muted">
        Sets the specified health, armor and helmet values to the player.<br />
        Value of -1 will keep the current value.
    </small>
    <EditForm Model="@vitality" OnValidSubmit="@vitalitySubmitted" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputSelect @bind-Value="vitality.UniqueId" class="form-select">
                <option selected disabled>Select a player</option>

                @if (Connection.PlayerDetails != null)
                {
                    <option value="0">- Everybody -</option>

                    foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                    {
                        string? playerName = connectionPlayerDetail.Value.PlayerName;
                        if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                        {
                            playerName = playerSummary.Nickname;
                        }
                        <option value="@connectionPlayerDetail.Key">@playerName</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Health</label>
            <InputNumber @bind-Value="vitality.Health" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Armor</label>
            <InputNumber @bind-Value="vitality.Armor" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Helmet</label>
            <InputNumber @bind-Value="vitality.Helmet" class="form-control" />
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-success form-control">Set</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly VitalityModel vitality = new();


    private async Task vitalitySubmitted()
    {
        try
        {
            if (vitality.UniqueId!.Value == 0)
            {
                try
                {
                    await RconService.SetVitality(ApiKey.ApiKey, Connection.ServerId, "All", vitality.Health, vitality.Armor, vitality.Helmet);
                }
                catch (Exception e)
                {
                    Toast.ShowError(e.Message);
                }

                Toast.ShowSuccess("All players vitals have been set", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Set vitality for all players to Health: {vitality.Health}, Armor: {vitality.Armor}, Helmet: {vitality.Helmet}");
                return;
            }

            await RconService.SetVitality(ApiKey.ApiKey, Connection.ServerId, vitality.UniqueId!.Value.ToString(), vitality.Helmet, vitality.Armor, vitality.Health);
            Toast.ShowSuccess("Player vitals have been set", "Player cheat executed");
            await AuditService.Add(Connection.ServerId, $"Set vitality for player {vitality.UniqueId!.Value} to Health: {vitality.Health}, Armor: {vitality.Armor}, Helmet: {vitality.Helmet}");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }
}
