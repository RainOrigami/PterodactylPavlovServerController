@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject AuditService AuditService
@inject IDispatcher Dispatcher
@inject IState<PlayersState> PlayersState

<div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
    <h3 class="mb-0">Give cash to player</h3>
    <small class="text-muted">
        Immediately applies additional funds to a player.
    </small>
    <EditForm Model="@giveCash" OnValidSubmit="@giveCashSubmitted" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputSelect @bind-Value="giveCash.UniqueId" class="form-select">
                <option selected disabled>Select a player</option>

                @if (Connection.PlayerDetails != null)
                {
                    <option value="0">- Give to everybody -</option>

                    foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                    {
                        string? playerName = connectionPlayerDetail.Value.PlayerName;
                        if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                        {
                            playerName = playerSummary.Nickname;
                        }
                        <option value="@connectionPlayerDetail.Key">@playerName</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Amount</label>
            <InputNumber @bind-Value="giveCash.Amount" class="form-control" />
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-success form-control">Give cash</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly GiveCashModel giveCash = new();


    private async Task giveCashSubmitted()
    {
        try
        {
            if (giveCash.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.GiveCash(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key, giveCash.Amount!.Value);
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                await AuditService.Add(Connection.ServerId, $"Gave all players cash {giveCash.Amount!.Value}");
                Toast.ShowSuccess("All players received cash", "Player cheat executed");
                return;
            }

            if (await RconService.GiveCash(ApiKey.ApiKey, Connection.ServerId, giveCash.UniqueId!.Value, giveCash.Amount!.Value))
            {
                Toast.ShowSuccess("Player received cash", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Gave player {giveCash.UniqueId!.Value} cash {giveCash.Amount!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to give cash", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

}
