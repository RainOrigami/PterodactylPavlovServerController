@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject AuditService AuditService
@inject IDispatcher Dispatcher
@inject IState<PlayersState> PlayersState

<div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
    <h3 class="mb-0">Give item to player</h3>
    <small class="text-muted">
        Immediately puts an item in an appropriate player gear slot, replacing any item that already occupies the slot by dropping the existing item on the ground.
    </small>
    <EditForm Model="@giveItem" OnValidSubmit="@giveItemSubmitted" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputSelect @bind-Value="giveItem.UniqueId" class="form-select">
                <option selected disabled>Select a player</option>

                @if (Connection.PlayerDetails != null)
                {
                    <option value="0">- Give to everybody -</option>

                    foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                    {
                        string? playerName = connectionPlayerDetail.Value.PlayerName;
                        if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                        {
                            playerName = playerSummary.Nickname;
                        }
                        <option value="@connectionPlayerDetail.Key">@playerName</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <InputSelect @bind-Value="giveItem.Item" class="form-select">
                <option selected disabled>Select an item</option>
                @foreach (Item item in Enum.GetValues(typeof(Item)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-success form-control">Give item</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly GiveItemModel giveItem = new();


    private async Task giveItemSubmitted()
    {
        try
        {
            if (giveItem.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.GiveItem(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key, giveItem.Item!.Value.ToString());
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                await AuditService.Add(Connection.ServerId, $"Gave all players item {giveItem.Item!.Value}");
                Toast.ShowSuccess("All players received item", "Player cheat executed");
                return;
            }

            if (await RconService.GiveItem(ApiKey.ApiKey, Connection.ServerId, giveItem.UniqueId!.Value, giveItem.Item!.Value.ToString()))
            {
                Toast.ShowSuccess("Player received item", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Gave player {giveItem.UniqueId!.Value} item {giveItem.Item!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to give item", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

}
