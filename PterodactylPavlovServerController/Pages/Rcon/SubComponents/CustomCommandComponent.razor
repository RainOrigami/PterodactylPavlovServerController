@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject AuditService AuditService

<div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
    <h3 class="mb-0">Custom command</h3>
    <small class="text-muted">
        Execute a custom command on the server
    </small>
    <EditForm Model="@customCommand" OnValidSubmit="@customCommandSubmitted" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputText @bind-Value="customCommand.Command" class="form-control" />
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-success form-control">Execute</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly CustomCommandModel customCommand = new();

    private async Task customCommandSubmitted()
    {
        try
        {
            Toast.ShowSuccess(await RconService.CustomCommand(ApiKey.ApiKey, Connection.ServerId, customCommand.Command!));
            await AuditService.Add(Connection.ServerId, $"Executed custom command: {customCommand.Command}");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }
}
