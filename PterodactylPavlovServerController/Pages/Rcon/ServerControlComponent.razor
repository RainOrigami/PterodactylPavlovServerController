@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Pages.Rcon.SubComponents
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject IDispatcher Dispatcher
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject IState<PlayersState> PlayersState
@inject AuditService AuditService

<div class="tab-pane container active px-0" id="server">

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Add or remove mod</h3>
        <small class="text-muted">
            Add or remove a moderator. Moderators can not be vote-kicked.
        </small>
        <EditForm Model="@addOrRemoveMod" OnValidSubmit="@addOrRemoveModSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputSelect @bind-Value="addOrRemoveMod.UniqueId" class="form-select">
                    <option selected disabled>Select a player</option>

                    @if (Connection.PlayerDetails != null)
                    {
                        foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                        {
                            string? playerName = connectionPlayerDetail.Value.PlayerName;
                            if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                            {
                                playerName = playerSummary.Nickname;
                            }
                            <option value="@connectionPlayerDetail.Key">@playerName</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control" @onclick="@(() => addOrRemoveMod.Add = true)">Add</button>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-danger form-control" @onclick="@(() => addOrRemoveMod.Add = false)">Remove</button>
            </div>
        </EditForm>
    </div>

    @if (!LeagueMode)
    {
        <div class="me-2" style="width: 850px; display: inline-block; vertical-align: top;">
            <h3 class="mb-0">Set limited ammo type</h3>
            <small class="text-muted">
                Immediately apply how ammo is handled on the server.<br />
                <b>Unlimited:</b> Players carry unlimited ammo, no boxes<br />
                <b>Limited Generic:</b> Players carry ammo boxes, one box for each weapon class (Pistol, Submachine gun, Rifles/MGs, Shotgun, Sniper)<br />
                <b>Limited Specific:</b> Players carry ammo boxes, one box for each individual weapon<br />
                <b>Limited Special:</b> All weapons except &quot;special&quot; weapons are unlimited, more clarification is needed<br />
                <b>Boxless Mode:</b> No information available, clarification required!
            </small>
            <EditForm Model="@limitedAmmoType" OnValidSubmit="@setLimitedAmmoTypeSubmitted" class="mt-3">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputSelect @bind-Value="limitedAmmoType.AmmoType" class="form-select">
                        <option selected disabled>Select a type</option>
                        @foreach (AmmoType ammoType in Enum.GetValues(typeof(AmmoType)))
                        {
                            <option value="@ammoType">@ammoType</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-outline-success form-control">Set ammo type</button>
                </div>
            </EditForm>
        </div>

        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
            <h3 class="mb-0">Custom command</h3>
            <small class="text-muted">
                Execute a custom command on the server
            </small>
            <EditForm Model="@customCommand" OnValidSubmit="@customCommandSubmitted" class="mt-3">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputText @bind-Value="customCommand.Command" class="form-control" />
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-outline-success form-control">Execute</button>
                </div>
            </EditForm>
        </div>
    }

    <ResetSNDComponent Connection="Connection" ServerInfo="ServerInfo" />

    <SetPinComponent Connection="Connection" ServerInfo="ServerInfo" />

    @if (!LeagueMode)
    {
        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
            <h3 class="mb-0">Show name tags</h3>
            <small class="text-muted">
                Immediately enables or disables name tags above friendly players
            </small>
            <div class="my-3">
                <button class="btn btn-outline-success form-control" @onclick="enableNametags">Enable</button>
            </div>
            <div class="my-3">
                <button class="btn btn-outline-danger form-control" @onclick="disableNametags">Disable</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    [Parameter]
    [EditorRequired]
    public bool LeagueMode { get; set; }

    private readonly AddOrRemoveModModel addOrRemoveMod = new();
    private readonly GiveCashModel giveCash = new();
    private readonly GiveItemModel giveItem = new();
    private readonly GiveTeamCashModel giveTeamCash = new();
    private readonly GiveVehicleModel giveVehicle = new();
    private readonly SetLimitedAmmoTypeModel limitedAmmoType = new();
    private readonly SetPlayerSkinModel playerSkin = new();
    private readonly SlapModel slap = new();
    private readonly TTTKarmaModel karma = new();
    private readonly CustomCommandModel customCommand = new();

    private async Task addOrRemoveModSubmitted()
    {
        try
        {
            if (addOrRemoveMod.Add!.Value)
            {
                if (await RconService.AddMod(ApiKey.ApiKey, Connection.ServerId, addOrRemoveMod.UniqueId!.Value))
                {
                    Toast.ShowSuccess("Player is now a moderator");
                    await AuditService.Add(Connection.ServerId, $"Added moderator {addOrRemoveMod.UniqueId}");
                }
                else
                {
                    Toast.ShowError("Server refused to make player into a moderator");
                }
            }
            else
            {
                if (await RconService.RemoveMod(ApiKey.ApiKey, Connection.ServerId, addOrRemoveMod.UniqueId!.Value))
                {
                    Toast.ShowSuccess("Player is no longer a moderator");
                    await AuditService.Add(Connection.ServerId, $"Removed moderator {addOrRemoveMod.UniqueId}");
                }
                else
                {
                    Toast.ShowError("Server refused to revoke moderator from player");
                }
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task setLimitedAmmoTypeSubmitted()
    {
        try
        {
            if (await RconService.SetLimitedAmmoType(ApiKey.ApiKey, Connection.ServerId, (int)limitedAmmoType.AmmoType!.Value))
            {
                Toast.ShowSuccess("Ammo type has been set");
                await AuditService.Add(Connection.ServerId, $"Ammo type set to {limitedAmmoType.AmmoType}");
            }
            else
            {
                Toast.ShowError("Server refused to set ammo type");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task enableNametags()
    {
        try
        {
            if (await RconService.Shownametags(ApiKey.ApiKey, Connection.ServerId, true))
            {
                Toast.ShowSuccess("Nametags have been made visible");
                await AuditService.Add(Connection.ServerId, $"Enabled nametags");
            }
            else
            {
                Toast.ShowError("Server refused make nametags visible");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task disableNametags()
    {
        try
        {
            if (await RconService.Shownametags(ApiKey.ApiKey, Connection.ServerId, false))
            {
                Toast.ShowSuccess("Nametags have been made invisible");
                await AuditService.Add(Connection.ServerId, $"Disabled nametags");
            }
            else
            {
                Toast.ShowError("Server refused make nametags invisible");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task customCommandSubmitted()
    {
        try
        {
            Toast.ShowSuccess(await RconService.CustomCommand(ApiKey.ApiKey, Connection.ServerId, customCommand.Command!));
            await AuditService.Add(Connection.ServerId, $"Executed custom command: {customCommand.Command}");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }
}
