@page "/rcon/{ServerId}"
@using Fluxor
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore;
@using PavlovVR_Rcon.Models.Pavlov
@using PterodactylPavlovServerController.Areas.Identity.Data
@using PterodactylPavlovServerController.Contexts
@using PterodactylPavlovServerController.Pages.Rcon.SubComponents
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Stores
@using PterodactylPavlovServerDomain.Models
@using PterodactylPavlovServerController.Models
@using PterodactylPavlovServerController.Pages.Player
@using PterodactylPavlovServerDomain.Extensions
@using System.ComponentModel.DataAnnotations
@using Steam.Models.SteamCommunity;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject PavlovRconConnectionService Rcon
@inject IState<PavlovServersState> PavlovServersState
@inject IState<MapsState> MapsState
@inject IState<PlayersState> PlayersState
@inject PavlovRconService RconService
@inject IToastService Toast
@inject PavlovServerContext PavlovServerContext
@inject ApiKeyService ApiKey
@inject IConfiguration Configuration
@inject PavlovRconConnectionService PavlovRconConnectionService

@{
    if (!Rcon.Initialised)
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        return;
    }

    if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is not PavlovRconConnection connection)
    {
        Dispatcher.Dispatch(new PageTitleSetAction("Invalid server"));
        <div>Server does not exist</div>
        return;
    }

    PterodactylServerModel server = connection.PterodactylServer;
    ServerInfo? serverInfo = connection.ServerInfo;

    Dispatcher.Dispatch(new PageTitleSetAction($"{server.Name} ({(serverInfo == null ? PavlovServersState.Value.ServerNamesFromGameIni.ContainsKey(ServerId) ? PavlovServersState.Value.ServerNamesFromGameIni[ServerId] : "..." : serverInfo.ServerName)})"));

    if (!connection.Online.HasValue || !connection.Online.Value)
    {
        <h2 class="text-bg-danger">
            Server is offline.
        </h2>
        return;
    }

    if (serverInfo == null)
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        return;
    }

    ServerMapModel serverMap = new()
            {
                MapLabel = serverInfo.MapLabel,
                GameMode = serverInfo.GameMode,
            };

    MapWorkshopModel? mapDetail = null;
    if (serverMap.IsWorkshopMap)
    {
        if (!MapsState.Value.MapDetails.TryGetValue(serverMap.WorkshopId, out mapDetail))
        {
            Dispatcher.Dispatch(new MapsLoadWorkshopAction(serverMap.WorkshopId));
        }
    }
}

<div class="container">
    <div class="row">
        <div class="col px-0">
            <div class="card bg-dark">
                <div class="row g-0">
                    <div class="col-auto">
                        <a href="@serverMap.Url" class="text-decoration-none" target="_blank">
                            <img class="card-img rounded-start" width="256" height="256" src="@(mapDetail == null ? "https://pavlov.bloodisgood.net/gunimages/unknown.png" : mapDetail.ImageURL)" alt="@serverInfo.MapLabel" />
                        </a>
                    </div>

                    <div class="col">
                        <div class="card-body">
                            <a href="@serverMap.Url" class="text-decoration-none" target="_blank">
                                <h5 class="card-title">@(mapDetail == null ? serverInfo.MapLabel : mapDetail.Name)</h5>
                            </a>
                            <p class="card-text">
                                <div class="container px-0">
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-gun"></i>
                                        </div>
                                        <div class="col px-1">@serverInfo.GameMode</div>
                                    </div>
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-person-rifle" style="color: limegreen;"></i>
                                        </div>
                                        <div class="col px-1">
                                            @(connection.PlayerListPlayers == null ? $"{serverInfo.CurrentPlayerCount()}*" : connection.PlayerListPlayers.Count)&nbsp;/&nbsp;@serverInfo.MaximumPlayerCount()
                                            @{
                                                if (reservedSlotPin >= 1000 && reservedSlotPin <= 9999 && reservedSlotAmount > 0 && reservedSlotAmount < serverInfo.MaximumPlayerCount())
                                                {
                                                    <span> - @reservedSlotAmount reserved (PIN: <span class="spoiler">@reservedSlotPin</span>)</span>
                                                    if (this.PavlovRconConnectionService.GetReservedSlotService(server.ServerId)!.IsPinLocked)
                                                    {
                                                        <i class="fa-regular fa-lock"></i>
                                                    }
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-chess-board"></i>
                                        </div>
                                        @if (serverInfo.Round == null)
                                        {
                                            <div class="col px-1">@serverInfo.RoundState</div>
                                        }
                                        else
                                        {
                                            <div class="col px-1">#@serverInfo.Round&nbsp;(@serverInfo.RoundState)</div>
                                        }
                                    </div>
                                    @if (serverInfo.Teams)
                                    {
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-trophy" style="color: lightskyblue"></i>
                                            </div>
                                            <div class="col px-1">@(serverInfo.Team0Score?.ToString() ?? "Unavailable")</div>
                                        </div>
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-trophy" style="color: tomato"></i>
                                            </div>
                                            <div class="col px-1">@(serverInfo.Team1Score?.ToString() ?? "Unavailable")</div>
                                        </div>
                                    }
                                    @if (File.Exists($"stats/{ServerId}.html"))
                                    {
                                        <div class="row position-absolute" style="bottom: 0;">
                                            <a href="stats/@ServerId" target="_blank" class="btn btn-outline-primary">Open statistics</a>
                                        </div>
                                    }
                                </div>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (leagueMode)
    {
        <ResetSNDComponent Connection="connection" ServerInfo="serverInfo" />
        <SetPinComponent Connection="connection" ServerInfo="serverInfo" />
    }

    <div class="row mt-3">
        <div class="col px-0">
            <div class="container px-0">
                <ul class="nav nav-tabs mb-3">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link @(currentTab == "players" ? "active" : "")" style="font-size: 2em;" href="#players" @onclick="@(() => currentTab = "players")" @onclick:preventDefault>Players</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link @(currentTab == "maps" ? "active" : "")" style="font-size: 2em;" href="#maps" @onclick="@(() => currentTab = "maps")" @onclick:preventDefault>Map change</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link @(currentTab == "offline" ? "active" : "")" style="font-size: 2em;" href="#offline" @onclick="@(() => currentTab = "offline")" @onclick:preventDefault>Offline</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link @(currentTab == "banned" ? "active" : "")" style="font-size: 2em;" href="#banned" @onclick="@(() => currentTab = "banned")" @onclick:preventDefault>Banned</a>
                    </li>
                    @if (!leagueMode)
                    {
                        <li class="nav-item" role="presentation">
                            <a class="nav-link @(currentTab == "cheats" ? "active" : "")" style="font-size: 2em;" href="#cheats" @onclick="@(() => currentTab = "cheats")" @onclick:preventDefault>Cheats</a>
                        </li>
                    }
                    @if (rconPlus)
                    {
                        <li class="nav-item" role="presentation">
                            <a class="nav-link @(currentTab == "rconplus" ? "active" : "")" style="font-size: 2em;" href="#rconplus" @onclick="@(() => currentTab = "rconplus")" @onclick:preventDefault>Rcon Plus</a>
                        </li>
                    }
                    <li class="nav-item" role="presentation">
                        <a class="nav-link @(currentTab == "server" ? "active" : "")" style="font-size: 2em;" href="#server" @onclick="@(() => currentTab = "server")" @onclick:preventDefault>Server</a>
                    </li>
                    @if (serverInfo.GameMode.ToLower() == GameMode.TTT.ToString().ToLower())
                    {
                        <li class="nav-item" role="presentation">
                            <a class="nav-link @(currentTab == "ttt" ? "active" : "")" style="font-size: 2em;" href="#ttt" @onclick="@(() => currentTab = "ttt")" @onclick:preventDefault>TTT</a>
                        </li>
                    }
                    <li class="nav-item" role="presentation">
                        <a class="nav-link @(currentTab == "settings" ? "active" : "")" style="font-size: 2em;" href="#server" @onclick="@(() => currentTab = "settings")" @onclick:preventDefault>Settings</a>
                    </li>
                </ul>

                <div class="tab-content">
                    @if (connection != null && serverInfo != null)
                    {
                        switch (currentTab)
                        {
                            case "players":
                                <PlayerListComponent Connection="connection" ServerInfo="serverInfo" LeagueMode="leagueMode" />
                                break;
                            case "maps":
                                <MapListComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                            case "offline":
                                <OfflinePlayerListComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                            case "banned":
                                <BannedPlayerListComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                            case "cheats":
                                <CheatsComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                            case "rconplus":
                                <RconPlusComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                            case "server":
                                <ServerControlComponent Connection="connection" ServerInfo="serverInfo" LeagueMode="leagueMode" />
                                break;
                            case "ttt":
                                <TTTComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                            case "settings":
                                <ServerSettingsComponent Connection="connection" ServerInfo="serverInfo" />
                                break;
                        }
                    }
                    else
                    {
                        @:Loading...
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string currentTab = "players";

    private const bool separateConnection = false;

    private int reservedSlotPin = 0;
    private int reservedSlotAmount = 0;
    private bool leagueMode = false;
    private bool rconPlus = false;

    [Parameter]
    [EditorRequired]
    public string ServerId { get; set; } = string.Empty;

    private async Task loadMaps(PavlovRconConnection connection)
    {
        if (!MapsState.Value.ServerMaps.ContainsKey(ServerId))
        {
            lock (Dispatcher)
            {
                Dispatcher.Dispatch(new MapsLoadServerAction(ApiKey.ApiKey, ServerId));
            }
        }

        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is PavlovRconConnection connection)
        {
            connection.OnServerErrorRaised += (id, error) =>
            {
                bool? online = Rcon.GetServer(ApiKey.ApiKey, ServerId)?.Online;
                if (!online.HasValue || !online.Value || id != ServerId)
                {
                    return;
                }

                Toast.ShowError(error, "Error");
            };
            if (!PavlovServersState.Value.ServerNamesFromGameIni.ContainsKey(ServerId))
            {
                Dispatcher.Dispatch(new PavlovServerLoadNameFromGameIniAction(connection.ApiKey, ServerId));
            }
            await loadMaps(connection);
        }

        await updateReservedSlots();
        await updateLeagueMode();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await updateLeagueMode();
        await updateReservedSlots();
        await updateRconPlus();
        Rcon.OnServersUpdated += refresh;
    }

    private async Task updateRconPlus()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? rconPlusSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == ServerId && s.SettingName == ServerSettings.SETTING_RCON_PLUS_ENABLED);

        this.rconPlus = false;
        if (rconPlusSetting != null)
        {
            if (bool.TryParse(rconPlusSetting.SettingValue, out bool rconPlusEnabled))
            {
                this.rconPlus = rconPlusEnabled;
            }
        }
    }

    private async Task updateLeagueMode()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? leagueModeSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == ServerId && s.SettingName == ServerSettings.SETTING_LEAGUE_MODE_ENABLED);
        if (leagueModeSetting != null)
        {
            bool.TryParse(leagueModeSetting.SettingValue, out leagueMode);
        }
        else
        {
            leagueMode = false;
        }
    }

    private async Task updateReservedSlots()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? pin = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_PIN);
        ServerSettings? amount = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_AMOUNT);

        if (amount != null && pin != null)
        {
            int.TryParse(pin.SettingValue, out reservedSlotPin);
            int.TryParse(amount.SettingValue, out reservedSlotAmount);
        }
        else
        {
            reservedSlotPin = 0;
            reservedSlotAmount = 0;
        }
    }

    private async void refresh()
    {
        await updateLeagueMode();
        await updateReservedSlots();

        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        Rcon.OnServersUpdated -= refresh;
        base.Dispose(disposing);
    }
}
