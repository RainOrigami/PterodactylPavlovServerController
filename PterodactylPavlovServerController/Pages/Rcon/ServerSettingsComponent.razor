@using Microsoft.EntityFrameworkCore;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Contexts;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerDomain.Extensions;
@using PterodactylPavlovServerDomain.Models;

@inject IConfiguration Configuration
@inject IToastService Toast
@inject AuditService AuditService

<div class="tab-pane container active px-0" id="rotation">
    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Reserved slots</h3>
        <small class="text-muted">
            Reserved slots will keep the specified amount of slots free by locking the server with a pin once the threshold is reached. To disable reserved slots, set the amount and pin fields to zero and save.
        </small>
        <EditForm Model="@reservedSlots" OnValidSubmit="@reservedSlotsSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Amount</label>
                <InputNumber @bind-Value="reservedSlots.Amount" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Pin</label>
                <InputNumber @bind-Value="reservedSlots.Pin" class="form-control" />
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Warmup round</h3>
        <small class="text-muted">
            Warmup round will be the first round after a map change. After this round, SND is reset.
        </small>

        <div class="mb-3">
            <EditForm Model="@warmupRoundModel" OnValidSubmit="@setWarmupRound">
                <label><InputCheckbox @bind-Value="warmupRoundModel.UseWarmupRound" class="form-check-inline" /> Enabled</label>
                <button class="btn btn-primary mb-3">Save</button>
            </EditForm>
        </div>

        <div style="width: 385px;">
            Load a saved loadout:<br />
            <EditForm Model="@setWarmupRoundLoadoutModel" OnValidSubmit="@setWarmupRoundLoadout">
                <InputSelect @bind-Value="@setWarmupRoundLoadoutModel.Name" class="form-select">
                    @if (storedWarmupRoundLoadouts == null)
                    {
                        <option selected disabled>Loading...</option>
                    }
                    else
                    {
                        <option selected disabled>Select a loadout</option>
                        @foreach (WarmupRoundLoadoutModel loadout in storedWarmupRoundLoadouts)
                        {
                            <option value="@loadout.Name">@loadout.Name</option>
                        }
                    }
                </InputSelect>
                <button type="submit" class="btn btn-outline-success form-control mt-1">Load</button>
            </EditForm>
        </div>

        <EditForm Model="currentWarmupRoundLoadout" OnValidSubmit="@saveWarmupRoundLoadout">

            <InputSelect @bind-Value="currentWarmupRoundLoadout.Gun" class="form-select mb-1">
                <option selected disabled>Select a gun</option>
                @foreach (Item item in Enum.GetValues(typeof(Item)).OfType<Item>().OrderBy(i => i.ToString()))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
            <InputSelect @bind-Value="currentWarmupRoundLoadout.Item" class="form-select mb-1">
                <option selected disabled>Select an item</option>
                @foreach (Item item in Enum.GetValues(typeof(Item)).OfType<Item>().OrderBy(i => i.ToString()))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
            <InputSelect @bind-Value="currentWarmupRoundLoadout.Attachment" class="form-select mb-1">
                <option selected disabled>Select an attachment</option>
                @foreach (Item item in Enum.GetValues(typeof(Item)).OfType<Item>().OrderBy(i => i.ToString()))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>



            <input type="text" @bind-value="@currentWarmupRoundLoadout.Name" placeholder="Loadout name" style="width: 385px;" class="form-control" />
            <button class="btn btn-primary mb-3">Save</button>
        </EditForm>
        <button type="button" class="btn btn-success mb-3" @onclick="deleteLoadout">Delete</button>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Pause server when inactive</h3>
        <small class="text-muted">
            Pauses the match while the server has less than two players and is on an SND map, preventing rotation and winning rounds by default.
        </small>
        <EditForm Model="@pauseServerModel" OnValidSubmit="@pauseServerSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>
                    Enabled
                    <InputCheckbox @bind-Value="pauseServerModel.Enabled" class="form-check-inline" />
                </label>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">League mode</h3>
        <small class="text-muted">
            Enable league mode to hide features that are unsafe for league and get faster access to the important features
        </small>
        <EditForm Model="@leagueModeModel" OnValidSubmit="@leageModeSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>
                    Enabled
                    <InputCheckbox @bind-Value="leagueModeModel.Enabled" class="form-check-inline" />
                </label>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Kill skin</h3>
        <small class="text-muted">
            Sets a skin for the first player reaching the specified kill count
        </small>
        <EditForm Model="@killSkinModel" OnValidSubmit="@killSkinSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>
                    Enabled
                    <InputCheckbox @bind-Value="killSkinModel.Enabled" class="form-check-inline" />
                </label>
            </div>
            <div class="mb-3">
                <label>Threshold</label>
                <InputNumber @bind-Value="killSkinModel.Threshold" class="form-control" />
            </div>
            <InputSelect @bind-Value="killSkinModel.Skin" class="form-select mb-1">
                <option selected disabled>Select a skin</option>
                @foreach (Skin skin in Enum.GetValues(typeof(Skin)).OfType<Skin>().OrderBy(i => i.ToString()))
                {
                    <option value="@skin">@skin</option>
                }
            </InputSelect>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Ping limiter</h3>
        <small class="text-muted">
            Automatically kicks players who exceed the specified average ping measured over the specified period of time
        </small>
        <EditForm Model="@pingLimiterModel" OnValidSubmit="@pingLimiterSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>
                    Enabled
                    <InputCheckbox @bind-Value="pingLimiterModel.Enabled" class="form-check-inline" />
                </label>
            </div>
            <div class="mb-3">
                <label>Threshold</label>
                <InputNumber @bind-Value="pingLimiterModel.Threshold" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Measure time in seconds</label>
                <InputNumber @bind-Value="pingLimiterModel.MeasureTime" class="form-control" />
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private string serverId = string.Empty;

    private readonly ReservedSlotsModel reservedSlots = new();
    private readonly PingLimiterModel pingLimiterModel = new();
    private readonly WarmupRoundModel warmupRoundModel = new();
    private readonly LeagueModeModel leagueModeModel = new();
    private readonly PauseServerModel pauseServerModel = new();
    private readonly SetWarmupRoundLoadoutModel setWarmupRoundLoadoutModel = new();
    private readonly KillSkinModel killSkinModel = new();

    private WarmupRoundLoadoutModel[]? storedWarmupRoundLoadouts = null;
    private WarmupRoundLoadoutModel currentWarmupRoundLoadout = new();

    private async Task saveWarmupRoundLoadout()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        WarmupRoundLoadoutModel? targetLoadout = await pavlovServerContext.WarmupLoadouts.FirstOrDefaultAsync(l => l.ServerId == Connection.ServerId && l.Name == currentWarmupRoundLoadout.Name);
        if (targetLoadout == null)
        {
            targetLoadout = new()
                {
                    ServerId = Connection.ServerId,
                    Name = currentWarmupRoundLoadout.Name
                };
            pavlovServerContext.WarmupLoadouts.Add(targetLoadout);
        }
        targetLoadout.Gun = currentWarmupRoundLoadout.Gun;
        targetLoadout.Item = currentWarmupRoundLoadout.Item;
        targetLoadout.Attachment = currentWarmupRoundLoadout.Attachment;

        await pavlovServerContext.SaveChangesAsync();

        await initialise();

        Toast.ShowSuccess("Loadout has been saved");
        await AuditService.Add(Connection.ServerId, $"Saved loadout \"{currentWarmupRoundLoadout.Name}\" with Gun \"{currentWarmupRoundLoadout.Gun}\", Item \"{currentWarmupRoundLoadout.Item}\", Attachment \"{currentWarmupRoundLoadout.Attachment}\"");
    }

    private async Task deleteLoadout()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        WarmupRoundLoadoutModel? targetLoadout = await pavlovServerContext.WarmupLoadouts.FirstOrDefaultAsync(l => l.ServerId == Connection.ServerId && l.Name == currentWarmupRoundLoadout.Name);
        if (targetLoadout == null)
        {
            Toast.ShowError("Unable to delete loadout: No loadout selected");
            return;
        }

        pavlovServerContext.WarmupLoadouts.Remove(targetLoadout);
        await pavlovServerContext.SaveChangesAsync();
        await initialise();

        Toast.ShowSuccess("Loadout deleted");
        await AuditService.Add(Connection.ServerId, $"Deleted loadout \"{targetLoadout.Name}\"");
    }

    private async Task setWarmupRoundLoadout()
    {
        if (string.IsNullOrEmpty(setWarmupRoundLoadoutModel.Name))
        {
            return;
        }

        currentWarmupRoundLoadout = storedWarmupRoundLoadouts!.First(r => r.Name == setWarmupRoundLoadoutModel.Name);

        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        await initialise();

        await base.OnParametersSetAsync();
    }

    private async Task initialise()
    {
        if (ServerInfo == null)
        {
            return;
        }

        if (serverId == Connection.ServerId)
        {
            return;
        }

        serverId = Connection.ServerId;
        PavlovServerContext pavlovServerContext = new(Configuration);

        ServerSettings? pin = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_PIN);
        ServerSettings? amount = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_AMOUNT);

        if (pin != null && int.TryParse(pin.SettingValue, out int pinValue))
        {
            reservedSlots.Pin = pinValue;
        }

        if (amount != null && int.TryParse(amount.SettingValue, out int amountValue))
        {
            reservedSlots.Amount = amountValue;
        }

        ServerSettings? warmupEnabled = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_WARMUP_ENABLED);
        warmupRoundModel.UseWarmupRound = warmupEnabled != null && bool.TryParse(warmupEnabled.SettingValue, out bool enableWarmup) && enableWarmup;

        storedWarmupRoundLoadouts = await pavlovServerContext.WarmupLoadouts.Where(r => r.ServerId == Connection.ServerId).ToArrayAsync();

        ServerSettings? leagueModeSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_LEAGUE_MODE_ENABLED);
        if (leagueModeSetting != null && bool.TryParse(leagueModeSetting.SettingValue, out bool leagueModeEnabled))
        {
            leagueModeModel.Enabled = leagueModeEnabled;
        }

        ServerSettings? pauseServerSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PAUSE_SERVER);
        if (pauseServerSetting != null && bool.TryParse(pauseServerSetting.SettingValue, out bool pauseServer))
        {
            pauseServerModel.Enabled = pauseServer;
        }

        ServerSettings? killSkinEnabled = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_SKIN_ENABLED);
        if (killSkinEnabled != null && bool.TryParse(killSkinEnabled.SettingValue, out bool killSkin))
        {
            killSkinModel.Enabled = killSkin;
        }
        ServerSettings? killSkinThreshold = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_SKIN_THRESHOLD);
        if (killSkinThreshold != null && int.TryParse(killSkinThreshold.SettingValue, out int killSkinThresholdValue))
        {
            killSkinModel.Threshold = killSkinThresholdValue;
        }
        ServerSettings? killSkinSkin = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_SKIN_SKIN);
        if (killSkinSkin != null && Enum.TryParse(killSkinSkin.SettingValue, out Skin killSkinSkinValue))
        {
            killSkinModel.Skin = killSkinSkinValue;
        }

        ServerSettings? pingLimitEnabled = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PING_KICK_ENABLED);
        if (pingLimitEnabled != null && bool.TryParse(pingLimitEnabled.SettingValue, out bool pingLimitEnabledValue))
        {
            pingLimiterModel.Enabled = pingLimitEnabledValue;
        }
        ServerSettings? pingLimitThreshold = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PING_KICK_THRESHOLD);
        if (pingLimitThreshold != null && int.TryParse(pingLimitThreshold.SettingValue, out int pingLimitThresholdValue))
        {
            pingLimiterModel.Threshold = pingLimitThresholdValue;
        }
        ServerSettings? pingLimitMeasureTime = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PING_KICK_MEASURETIME);
        if (pingLimitMeasureTime != null && int.TryParse(pingLimitMeasureTime.SettingValue, out int pingLimitMeasureTimeValue))
        {
            pingLimiterModel.MeasureTime = pingLimitMeasureTimeValue;
        }
    }

    private async Task setWarmupRound()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? warmupEnabled = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_WARMUP_ENABLED);
        if (warmupEnabled == null)
        {
            warmupEnabled = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_WARMUP_ENABLED
                };
            pavlovServerContext.Settings.Add(warmupEnabled);
        }

        warmupEnabled.SettingValue = warmupRoundModel.UseWarmupRound.ToString();

        await pavlovServerContext.SaveChangesAsync();

        Toast.ShowSuccess($"Warmup has been {(warmupRoundModel.UseWarmupRound ? "enabled" : "disabled")}");
        await AuditService.Add(Connection.ServerId, $"{(warmupRoundModel.UseWarmupRound ? "Enabled" : "Disabled")} warmup");
    }

    private async Task reservedSlotsSubmitted()
    {
        try
        {
            PavlovServerContext pavlovServerContext = new(Configuration);
            ServerSettings? pin = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_PIN);
            ServerSettings? amount = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_AMOUNT);

            if (reservedSlots.Pin == 0 && reservedSlots.Amount == 0)
            {
                if (pin != null)
                {
                    pavlovServerContext.Settings.Remove(pin);
                }

                if (amount != null)
                {
                    pavlovServerContext.Settings.Remove(amount);
                }

                await pavlovServerContext.SaveChangesAsync();

                await AuditService.Add(Connection.ServerId, $"Removed reserved slots");
                Toast.ShowSuccess("Removed reserved slots");
                return;
            }

            if (reservedSlots.Amount <= 0)
            {
                Toast.ShowError("Reserved slots amount must be a positive value.");
                return;
            }

            if (reservedSlots.Amount >= Connection.ServerInfo!.MaximumPlayerCount())
            {
                Toast.ShowError("Reserved slots amount exceeds maximum player count.");
                return;
            }

            if (reservedSlots.Pin < 1000 || reservedSlots.Pin > 9999)
            {
                // TODO: Verify that pin indeed must be four digits, or if Pavlov supports less or more digits.
                Toast.ShowError("Pin must be exactly four digits.");
                return;
            }

            if (pin == null)
            {
                pin = new()
                    {
                        ServerId = Connection.ServerId,
                        SettingName = ServerSettings.SETTING_RESERVED_SLOT_PIN
                    };
                await pavlovServerContext.Settings.AddAsync(pin);
            }

            if (amount == null)
            {
                amount = new()
                    {
                        ServerId = Connection.ServerId,
                        SettingName = ServerSettings.SETTING_RESERVED_SLOT_AMOUNT
                    };
                await pavlovServerContext.Settings.AddAsync(amount);
            }

            pin.SettingValue = reservedSlots.Pin.ToString();
            amount.SettingValue = reservedSlots.Amount.ToString();
            await pavlovServerContext.SaveChangesAsync();

            await AuditService.Add(Connection.ServerId, $"Set reserved slots to amount {reservedSlots.Amount} and pin -redacted-");
            Toast.ShowSuccess($"Successfully enabled {reservedSlots.Amount} reserved slots");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task leageModeSubmitted()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? leagueModeSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_LEAGUE_MODE_ENABLED);
        if (leagueModeSetting == null)
        {
            leagueModeSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_LEAGUE_MODE_ENABLED
                };
            pavlovServerContext.Settings.Add(leagueModeSetting);
        }

        leagueModeSetting.SettingValue = leagueModeModel.Enabled.ToString();
        await pavlovServerContext.SaveChangesAsync();

        await AuditService.Add(Connection.ServerId, $"{(leagueModeModel.Enabled ? "Enabled" : "Disabled")} league mode");
        Toast.ShowSuccess($"Successfully {(leagueModeModel.Enabled ? "enabled" : "disabled")} league mode.");
    }

    private async Task pauseServerSubmitted()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? pauseServerSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PAUSE_SERVER);
        if (pauseServerSetting == null)
        {
            pauseServerSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_PAUSE_SERVER
                };
            pavlovServerContext.Settings.Add(pauseServerSetting);
        }

        pauseServerSetting.SettingValue = pauseServerModel.Enabled.ToString();
        await pavlovServerContext.SaveChangesAsync();

        await AuditService.Add(Connection.ServerId, $"{(pauseServerModel.Enabled ? "Enabled" : "Disabled")} server pause");
        Toast.ShowSuccess($"Successfully {(pauseServerModel.Enabled ? "enabled" : "disabled")} server pause.");
    }

    private async Task killSkinSubmitted()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);

        ServerSettings? killSkinEnabledSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_SKIN_ENABLED);
        ServerSettings? killSkinThresholdSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_SKIN_THRESHOLD);
        ServerSettings? killSkinSkinSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_SKIN_SKIN);

        if (killSkinEnabledSetting == null)
        {
            killSkinEnabledSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_SKIN_ENABLED
                };
            await pavlovServerContext.Settings.AddAsync(killSkinEnabledSetting);
        }
        killSkinEnabledSetting.SettingValue = this.killSkinModel.Enabled.ToString();

        if (killSkinThresholdSetting == null)
        {
            killSkinThresholdSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_SKIN_THRESHOLD
                };
            await pavlovServerContext.Settings.AddAsync(killSkinThresholdSetting);
        }
        killSkinThresholdSetting.SettingValue = this.killSkinModel.Threshold.ToString();

        if (killSkinSkinSetting == null)
        {
            killSkinSkinSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_SKIN_SKIN
                };
            await pavlovServerContext.Settings.AddAsync(killSkinSkinSetting);
        }
        killSkinSkinSetting.SettingValue = this.killSkinModel.Skin!.Value.ToString();

        await pavlovServerContext.SaveChangesAsync();

        await AuditService.Add(Connection.ServerId, $"{(this.killSkinModel.Enabled ? "Enabled" : "Disabled")} kill skin.{(this.killSkinModel.Enabled ? $" Threshold {this.killSkinModel.Threshold}, Skin {this.killSkinModel.Skin}." : "")}");
        Toast.ShowSuccess($"Successfully {(this.killSkinModel.Enabled ? "enabled" : "disabled")} kill skin.");
    }

    private async Task pingLimiterSubmitted()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);

        ServerSettings? pingLimiterEnabledSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PING_KICK_ENABLED);
        ServerSettings? pingLimiterThresholdSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PING_KICK_THRESHOLD);
        ServerSettings? pingLimiterMeasureTimeSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_PING_KICK_MEASURETIME);

        if (pingLimiterEnabledSetting == null)
        {
            pingLimiterEnabledSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_PING_KICK_ENABLED
                };
            await pavlovServerContext.Settings.AddAsync(pingLimiterEnabledSetting);
        }
        pingLimiterEnabledSetting.SettingValue = this.pingLimiterModel.Enabled.ToString();

        if (pingLimiterThresholdSetting == null)
        {
            pingLimiterThresholdSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_PING_KICK_THRESHOLD
                };
            await pavlovServerContext.Settings.AddAsync(pingLimiterThresholdSetting);
        }
        pingLimiterThresholdSetting.SettingValue = this.pingLimiterModel.Threshold.ToString();

        if (pingLimiterMeasureTimeSetting == null)
        {
            pingLimiterMeasureTimeSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_PING_KICK_MEASURETIME
                };
            await pavlovServerContext.Settings.AddAsync(pingLimiterMeasureTimeSetting);
        }
        pingLimiterMeasureTimeSetting.SettingValue = this.pingLimiterModel.MeasureTime.ToString();

        await pavlovServerContext.SaveChangesAsync();

        await AuditService.Add(Connection.ServerId, $"{(this.pingLimiterModel.Enabled ? "Enabled" : "Disabled")} ping limiter.{(this.pingLimiterModel.Enabled ? $" Threshold {this.pingLimiterModel.Threshold}, Measure Time {this.pingLimiterModel.MeasureTime}." : "")}");
        Toast.ShowSuccess($"Successfully {(this.pingLimiterModel.Enabled ? "enabled" : "disabled")} ping limiter.");
    }
 }
