@using Microsoft.EntityFrameworkCore;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Contexts;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerDomain.Extensions;
@using PterodactylPavlovServerDomain.Models;

@inject IConfiguration Configuration
@inject IToastService Toast
@inject AuditService AuditService

<div class="tab-pane container active px-0" id="rotation">
    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Reserved slots</h3>
        <small class="text-muted">
            Reserved slots will keep the specified amount of slots free by locking the server with a pin once the threshold is reached. To disable reserved slots, set the amount and pin fields to zero and save.
        </small>
        <EditForm Model="@reservedSlots" OnValidSubmit="@reservedSlotsSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Amount</label>
                <InputNumber @bind-Value="reservedSlots.Amount" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Pin</label>
                <InputNumber @bind-Value="reservedSlots.Pin" class="form-control" />
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Warmup round</h3>
        <small class="text-muted">
            Warmup round will be the first round after a map change. After this round, SND is reset.
        </small>
        <EditForm Model="@warmupRoundModel" OnValidSubmit="@warmupRoundSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label><InputCheckbox @bind-Value="warmupRoundModel.UseWarmupRound" class="form-check-inline" /> Enabled</label>
            </div>

            <table class="table table-striped table-dark table-hover">
                <thead>
                    <tr>
                        <th nowrap>Item</th>
                        <th width="100%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Item item in warmupRoundModel.Items)
                    {
                        <tr>
                            <td nowrap class="py-0">@item</td>
                            <td class="py-0">
                                <span>
                                    <button type="button" class="btn btn-link text-info" @onclick="@(() => removeItem(item))"><i class="fa-solid fa-trash-can"></i></button>
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
                <tr>
                    <td colspan="2">
                        <EditForm Context="addItem" Model="@addWarmupItemModel" OnValidSubmit="@addItem" style="width: 385px;">
                            <InputSelect @bind-Value="addWarmupItemModel.Item" class="form-select mb-1">
                                <option selected disabled>Select an item</option>
                                @foreach (Item item in Enum.GetValues(typeof(Item)).OfType<Item>().OrderBy(i => i.ToString()))
                                {
                                    <option value="@item">@item</option>
                                }
                            </InputSelect>
                            <button type="submit" class="btn btn-outline-success form-control">Add item</button>
                        </EditForm>
                    </td>
                </tr>
            </table>

            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save and apply</button>
            </div>
        </EditForm>

    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">League mode</h3>
        <small class="text-muted">
            Enable league mode to hide features that are unsafe for league and get faster access to the important features
        </small>
        <EditForm Model="@leagueMode" OnValidSubmit="@leageModeSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>
                    Enabled
                    <InputCheckbox @bind-Value="leagueMode.Enabled" class="form-check-inline" />
                </label>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Save</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private string serverId = string.Empty;

    private readonly ReservedSlotsModel reservedSlots = new();
    private readonly WarmupRoundModel warmupRoundModel = new();
    private readonly AddWarmupItemModel addWarmupItemModel = new();
    private readonly LeagueModeModel leagueMode = new();

    protected override async Task OnParametersSetAsync()
    {
        await initialise();

        await base.OnParametersSetAsync();
    }

    private async Task initialise()
    {
        if (ServerInfo == null)
        {
            return;
        }

        if (serverId == Connection.ServerId)
        {
            return;
        }

        serverId = Connection.ServerId;
        PavlovServerContext pavlovServerContext = new(Configuration);

        ServerSettings? pin = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_PIN);
        ServerSettings? amount = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_AMOUNT);

        if (pin != null && int.TryParse(pin.SettingValue, out int pinValue))
        {
            reservedSlots.Pin = pinValue;
        }

        if (amount != null && int.TryParse(amount.SettingValue, out int amountValue))
        {
            reservedSlots.Amount = amountValue;
        }

        ServerSettings? warmupEnabled = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_WARMUP_ENABLED);
        warmupRoundModel.UseWarmupRound = warmupEnabled != null && bool.TryParse(warmupEnabled.SettingValue, out bool enableWarmup) && enableWarmup;

        List<ServerWarmupItemModel> itemModels = pavlovServerContext.WarmupItems.Where(s => s.ServerId == Connection.ServerId).ToList();
        warmupRoundModel.Items = itemModels.Select(m => m.Item).ToList();

        ServerSettings? leagueModeSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_LEAGUE_MODE_ENABLED);
        if (leagueModeSetting != null && bool.TryParse(leagueModeSetting.SettingValue, out bool leagueModeEnabled))
        {
            leagueMode.Enabled = leagueModeEnabled;
        }
    }

    private async Task warmupRoundSubmitted()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? warmupEnabled = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_WARMUP_ENABLED);
        if (warmupEnabled == null)
        {
            warmupEnabled = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_WARMUP_ENABLED
                };
            pavlovServerContext.Settings.Add(warmupEnabled);
        }

        warmupEnabled.SettingValue = warmupRoundModel.UseWarmupRound.ToString();

        pavlovServerContext.WarmupItems.RemoveRange(pavlovServerContext.WarmupItems.Where(i => i.ServerId == Connection.ServerId));
        foreach (Item item in warmupRoundModel.Items)
        {
            pavlovServerContext.WarmupItems.Add(new()
                {
                    ServerId = Connection.ServerId,
                    Item = item
                });
        }

        await pavlovServerContext.SaveChangesAsync();

        Toast.ShowSuccess("Warmup settings have been saved and applied.");
    }

    private void removeItem(Item item)
    {
        warmupRoundModel.Items.Remove(item);
    }

    private void addItem()
    {
        if (this.warmupRoundModel.Items.Contains(addWarmupItemModel.Item!.Value))
        {
            Toast.ShowError($"Item {addWarmupItemModel.Item.Value} is already in the list.", "Duplicate item!");
            return;
        }

        this.warmupRoundModel.Items.Add(addWarmupItemModel.Item.Value);
    }

    private async Task reservedSlotsSubmitted()
    {
        try
        {
            PavlovServerContext pavlovServerContext = new(Configuration);
            ServerSettings? pin = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_PIN);
            ServerSettings? amount = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_RESERVED_SLOT_AMOUNT);

            if (reservedSlots.Pin == 0 && reservedSlots.Amount == 0)
            {
                if (pin != null)
                {
                    pavlovServerContext.Settings.Remove(pin);
                }

                if (amount != null)
                {
                    pavlovServerContext.Settings.Remove(amount);
                }

                await pavlovServerContext.SaveChangesAsync();

                await AuditService.Add(Connection.ServerId, $"Removed reserved slots");
                Toast.ShowSuccess("Removed reserved slots");
                return;
            }

            if (reservedSlots.Amount <= 0)
            {
                Toast.ShowError("Reserved slots amount must be a positive value.");
                return;
            }

            if (reservedSlots.Amount >= Connection.ServerInfo!.MaximumPlayerCount())
            {
                Toast.ShowError("Reserved slots amount exceeds maximum player count.");
                return;
            }

            if (reservedSlots.Pin < 1000 || reservedSlots.Pin > 9999)
            {
                // TODO: Verify that pin indeed must be four digits, or if Pavlov supports less or more digits.
                Toast.ShowError("Pin must be exactly four digits.");
                return;
            }

            if (pin == null)
            {
                pin = new()
                    {
                        ServerId = Connection.ServerId,
                        SettingName = ServerSettings.SETTING_RESERVED_SLOT_PIN
                    };
                await pavlovServerContext.Settings.AddAsync(pin);
            }

            if (amount == null)
            {
                amount = new()
                    {
                        ServerId = Connection.ServerId,
                        SettingName = ServerSettings.SETTING_RESERVED_SLOT_AMOUNT
                    };
                await pavlovServerContext.Settings.AddAsync(amount);
            }

            pin.SettingValue = reservedSlots.Pin.ToString();
            amount.SettingValue = reservedSlots.Amount.ToString();
            await pavlovServerContext.SaveChangesAsync();

            await AuditService.Add(Connection.ServerId, $"Set reserved slots to amount {reservedSlots.Amount} and pin -redacted-");
            Toast.ShowSuccess($"Successfully enabled {reservedSlots.Amount} reserved slots");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task leageModeSubmitted()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);
        ServerSettings? leagueModeSetting = await pavlovServerContext.Settings.FirstOrDefaultAsync(s => s.ServerId == Connection.ServerId && s.SettingName == ServerSettings.SETTING_LEAGUE_MODE_ENABLED);
        if (leagueModeSetting == null)
        {
            leagueModeSetting = new()
                {
                    ServerId = Connection.ServerId,
                    SettingName = ServerSettings.SETTING_LEAGUE_MODE_ENABLED
                };
            pavlovServerContext.Settings.Add(leagueModeSetting);
        }

        leagueModeSetting.SettingValue = leagueMode.Enabled.ToString();
        await pavlovServerContext.SaveChangesAsync();

        await AuditService.Add(Connection.ServerId, $"{(leagueMode.Enabled ? "Enabled" : "Disabled")} league mode");
        Toast.ShowSuccess($"Successfully {(leagueMode.Enabled ? "enabled" : "disabled")} league mode.");
    }
}
