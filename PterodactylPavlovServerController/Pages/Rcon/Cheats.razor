@using Fluxor;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using Steam.Models.SteamCommunity;
@inject IDispatcher Dispatcher
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject IState<PlayersState> PlayersState
@inject AuditService AuditService

<div class="tab-pane container active px-0" id="cheats">
    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Give cash to player</h3>
        <small class="text-muted">
            Immediately applies additional funds to a player.
        </small>
        <EditForm Model="@giveCash" OnValidSubmit="@giveCashSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputSelect @bind-Value="giveCash.UniqueId" class="form-select">
                    <option selected disabled>Select a player</option>

                    @if (Connection.PlayerDetails != null)
                    {
                        <option value="0">- Give to everybody -</option>

                        foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                        {
                            string? playerName = connectionPlayerDetail.Value.PlayerName;
                            if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                            {
                                playerName = playerSummary.Nickname;
                            }
                            <option value="@connectionPlayerDetail.Key">@playerName</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label>Amount</label>
                <InputNumber @bind-Value="giveCash.Amount" class="form-control" />
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Give cash</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Give item to player</h3>
        <small class="text-muted">
            Immediately puts an item in an appropriate player gear slot, replacing any item that already occupies the slot by dropping the existing item on the ground.
        </small>
        <EditForm Model="@giveItem" OnValidSubmit="@giveItemSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputSelect @bind-Value="giveItem.UniqueId" class="form-select">
                    <option selected disabled>Select a player</option>

                    @if (Connection.PlayerDetails != null)
                    {
                        <option value="0">- Give to everybody -</option>

                        foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                        {
                            string? playerName = connectionPlayerDetail.Value.PlayerName;
                            if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                            {
                                playerName = playerSummary.Nickname;
                            }
                            <option value="@connectionPlayerDetail.Key">@playerName</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <InputSelect @bind-Value="giveItem.Item" class="form-select">
                    <option selected disabled>Select an item</option>
                    @foreach (Item item in Enum.GetValues(typeof(Item)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Give item</button>
            </div>
        </EditForm>
    </div>

    @if (ServerInfo.Teams)
    {
        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
            <h3 class="mb-0">Give cash to team</h3>
            <small class="text-muted">
                Immediately applies additional funds to all players in a team.
            </small>
            <EditForm Model="@giveTeamCash" OnValidSubmit="@giveTeamCashSubmitted" class="mt-3">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputSelect @bind-Value="giveTeamCash.TeamId" class="form-select">
                        <option selected disabled>Select a team</option>
                        <option value="0">Blue team</option>
                        <option value="1">Red team</option>
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label>Amount</label>
                    <InputNumber @bind-Value="giveTeamCash.Amount" class="form-control" />
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-outline-success form-control">Give cash</button>
                </div>
            </EditForm>
        </div>
    }

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Give vehicle to player</h3>
        <small class="text-muted">
            Immediately spawns a vehicle inside the player. Inside! The player may get stuck from this.
        </small>
        <EditForm Model="@giveVehicle" OnValidSubmit="@giveVehicleSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputSelect @bind-Value="giveVehicle.UniqueId" class="form-select">
                    <option selected disabled>Select a player</option>

                    @if (Connection.PlayerDetails != null)
                    {
                        <option value="0">- Give to everybody -</option>

                        foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                        {
                            string? playerName = connectionPlayerDetail.Value.PlayerName;
                            if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                            {
                                playerName = playerSummary.Nickname;
                            }
                            <option value="@connectionPlayerDetail.Key">@playerName</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <InputSelect @bind-Value="giveVehicle.Vehicle" class="form-select">
                    <option selected disabled>Select a vehicle</option>
                    @foreach (Vehicle vehicle in Enum.GetValues(typeof(Vehicle)))
                    {
                        <option value="@vehicle">@vehicle</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Spawn vehicle</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Set player skin</h3>
        <small class="text-muted">
            Immediately applies the specified model to the player.
        </small>
        <EditForm Model="@playerSkin" OnValidSubmit="@setPlayerSkinSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputSelect @bind-Value="playerSkin.UniqueId" class="form-select">
                    <option selected disabled>Select a player</option>

                    @if (Connection.PlayerDetails != null)
                    {
                        <option value="0">- Give to everybody -</option>

                        foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                        {
                            string? playerName = connectionPlayerDetail.Value.PlayerName;
                            if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                            {
                                playerName = playerSummary.Nickname;
                            }
                            <option value="@connectionPlayerDetail.Key">@playerName</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <InputSelect @bind-Value="playerSkin.Skin" class="form-select">
                    <option selected disabled>Select a skin</option>
                    @foreach (Skin skin in Enum.GetValues(typeof(Skin)))
                    {
                        <option value="@skin">@skin</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Set skin</button>
            </div>
        </EditForm>
    </div>

    <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
        <h3 class="mb-0">Slap player</h3>
        <small class="text-muted">
            Immediately applies the specified amount of damage to the player.
        </small>
        <EditForm Model="@slap" OnValidSubmit="@slapSubmitted" class="mt-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputSelect @bind-Value="slap.UniqueId" class="form-select">
                    <option selected disabled>Select a player</option>

                    @if (Connection.PlayerDetails != null)
                    {
                        <option value="0">- Slap everybody -</option>

                        foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails)
                        {
                            string? playerName = connectionPlayerDetail.Value.PlayerName;
                            if (PlayersState.Value.PlayerSummaries.TryGetValue(connectionPlayerDetail.Key, out PlayerSummaryModel? playerSummary))
                            {
                                playerName = playerSummary.Nickname;
                            }
                            <option value="@connectionPlayerDetail.Key">@playerName</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label>Amount</label>
                <InputNumber @bind-Value="slap.Amount" class="form-control" />
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-success form-control">Slap</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public PavlovRconConnection Connection { get; set; }

    [Parameter]
    [EditorRequired]
    public ServerInfo ServerInfo { get; set; }

    private readonly AddOrRemoveModModel addOrRemoveMod = new();
    private readonly GiveCashModel giveCash = new();
    private readonly GiveItemModel giveItem = new();
    private readonly GiveTeamCashModel giveTeamCash = new();
    private readonly GiveVehicleModel giveVehicle = new();
    private readonly SetLimitedAmmoTypeModel limitedAmmoType = new();
    private readonly SetPlayerSkinModel playerSkin = new();
    private readonly SlapModel slap = new();
    private readonly SetPinModel pin = new();
    private readonly TTTKarmaModel karma = new();
    private readonly CustomCommandModel customCommand = new();

    private async Task giveCashSubmitted()
    {
        try
        {
            if (await RconService.GiveCash(ApiKey.ApiKey, Connection.ServerId, giveCash.UniqueId!.Value, giveCash.Amount!.Value))
            {
                Toast.ShowSuccess("Player received cash", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Gave player {giveCash.UniqueId!.Value} cash {giveCash.Amount!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to give cash", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveItemSubmitted()
    {
        try
        {
            if (giveItem.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.GiveItem(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key, giveItem.Item!.Value.ToString());
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                await AuditService.Add(Connection.ServerId, $"Gave all players item {giveItem.Item!.Value}");
                Toast.ShowSuccess("All players received item", "Player cheat executed");
                return;
            }

            if (await RconService.GiveItem(ApiKey.ApiKey, Connection.ServerId, giveItem.UniqueId!.Value, giveItem.Item!.Value.ToString()))
            {
                Toast.ShowSuccess("Player received item", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Gave player {giveItem.UniqueId!.Value} item {giveItem.Item!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to give item", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveTeamCashSubmitted()
    {
        try
        {
            if (await RconService.GiveTeamCash(ApiKey.ApiKey, Connection.ServerId, giveTeamCash.TeamId!.Value, giveTeamCash.Amount!.Value))
            {
                Toast.ShowSuccess("Team received cash", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Gave team {giveTeamCash.TeamId!.Value} cash {giveTeamCash.Amount!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to give team cash", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveVehicleSubmitted()
    {
        try
        {
            if (giveItem.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.GiveVehicle(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key, giveVehicle.Vehicle!.Value.ToString());
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                await AuditService.Add(Connection.ServerId, $"Gave all players vehicle {giveVehicle.Vehicle!.Value}");
                Toast.ShowSuccess("All players received vehicle", "Player cheat executed");
                return;
            }

            if (await RconService.GiveVehicle(ApiKey.ApiKey, Connection.ServerId, giveVehicle.UniqueId!.Value, giveVehicle.Vehicle!.Value.ToString()))
            {
                Toast.ShowSuccess("Player received vehicle", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Gave player {giveVehicle.UniqueId!.Value} vehicle {giveVehicle.Vehicle!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to give vehicle", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task setPlayerSkinSubmitted()
    {
        try
        {
            if (giveItem.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.SetSkin(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key, playerSkin.Skin!.Value.ToString());
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                Toast.ShowSuccess("All player skins have been set", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Set all players skin to {playerSkin.Skin!.Value}");
                return;
            }

            if (await RconService.SetSkin(ApiKey.ApiKey, Connection.ServerId, playerSkin.UniqueId!.Value, playerSkin.Skin!.Value.ToString()))
            {
                Toast.ShowSuccess("Player skin has been set", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Set player {playerSkin.UniqueId!.Value} skin to {playerSkin.Skin!.Value}");
            }
            else
            {
                Toast.ShowError("Server refused to set player skin", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task slapSubmitted()
    {
        try
        {
            if (giveItem.UniqueId!.Value == 0)
            {
                foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in Connection.PlayerDetails!)
                {
                    try
                    {
                        await RconService.Slap(ApiKey.ApiKey, Connection.ServerId, connectionPlayerDetail.Key, slap.Amount!.Value);
                    }
                    catch (Exception e)
                    {
                        Toast.ShowError(e.Message);
                    }
                }

                Toast.ShowSuccess("All players have been slapped", "Player cheat executed");
                await AuditService.Add(Connection.ServerId, $"Slapped all players for {slap.Amount!.Value}");
                return;
            }

            await RconService.Slap(ApiKey.ApiKey, Connection.ServerId, slap.UniqueId!.Value, slap.Amount!.Value);
            Toast.ShowSuccess("Player has been slapped", "Player cheat executed");
            await AuditService.Add(Connection.ServerId, $"Slapped player {slap.UniqueId!.Value} for {slap.Amount!.Value}");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }
}
