@using Fluxor
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PavlovVR_Rcon.Models.Pavlov
@using PterodactylPavlovServerController.Areas.Identity.Data
@using PterodactylPavlovServerController.Contexts
@using PterodactylPavlovServerController.Stores
@using PterodactylPavlovServerDomain.Models
@using Steam.Models.SteamCommunity
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Models
@using PterodactylPavlovServerDomain.Extensions
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<PlayersState> PlayersState
@inject PavlovRconConnectionService Rcon
@inject PavlovRconService RconService
@inject IToastService Toast
@inject ApiKeyService ApiKey
@inject IConfiguration Configuration
@inject CountryService CountryService
@inject AuditService AuditService

@{
    PavlovRconConnection? connection = null;
    if (ServerId != null)
    {
        connection = Rcon.GetServer(ApiKey.ApiKey, ServerId);
    }

    Player? playerListPlayer = null;
    if (connection is { PlayerListPlayers: { } playerListPlayers, })
    {
        playerListPlayers.TryGetValue(PlayerId, out playerListPlayer);
    }

    PlayerDetail? playerDetail = null;
    if (connection is { PlayerDetails: { } playerDetails, })
    {
        playerDetails.TryGetValue(PlayerId, out playerDetail);
    }

    PlayersState.Value.PlayerSummaries.TryGetValue(PlayerId, out PlayerSummaryModel? playerSummary);

    PlayersState.Value.PlayerBans.TryGetValue(PlayerId, out IReadOnlyCollection<PlayerBansModel>? playerBans);

    PersistentPavlovPlayerModel? dbPlayer = null;

    if (ServerId != null)
    {
        using (PavlovServerContext pavlovServerContext = new(Configuration))
        {
            dbPlayer = pavlovServerContext.Players.SingleOrDefault(p => p.ServerId == ServerId && p.UniqueId == PlayerId);
        }
    }

    string profileUrl;
    string avatarUrl;
    if (playerSummary != null)
    {
        profileUrl = playerSummary.ProfileUrl;
        avatarUrl = playerSummary.AvatarFullUrl;
    }
    else
    {
        profileUrl = $"https://steamcommunity.com/profiles/{PlayerId}/";
        avatarUrl = "https://pavlov.bloodisgood.net/gunimages/unknown.png";
    }

    string playerName;
    List<string> allNames = new();

    if (!string.IsNullOrEmpty(playerSummary?.Nickname))
    {
        allNames.Add(playerSummary.Nickname);
    }

    if (!string.IsNullOrEmpty(playerListPlayer?.Username) && !allNames.Contains(playerListPlayer.Username))
    {
        allNames.Add(playerListPlayer.Username);
    }

    if (!string.IsNullOrEmpty(dbPlayer?.Username) && !allNames.Contains(dbPlayer.Username))
    {
        allNames.Add(dbPlayer.Username);
    }

    if (allNames.Count == 0)
    {
        allNames.Add(PlayerId.ToString());
    }

    if (playerSummary != null)
    {
        playerName = playerSummary.Nickname;
    }
    else if (playerListPlayer != null)
    {
        playerName = playerListPlayer.Username;
    }
    else if (dbPlayer != null)
    {
        playerName = dbPlayer.Username;
    }
    else
    {
        playerName = PlayerId.ToString();
    }
}
<div class="card bg-dark">
    <div class="row g-0">
        <div class="col-auto">
            <a href="@profileUrl" class="text-decoration-none" target="_blank">
                <img class="card-img rounded-start" width="256" height="256" src="@avatarUrl" alt="@PlayerId" />
            </a>
        </div>

        <div class="col">
            <div class="card-body">
                <a href="@profileUrl" class="text-decoration-none" target="_blank">
                    <h5 class="card-title my-0 @(allNames.Count > 1 ? "text-danger" : "")">
                        @allNames[0]
                    </h5>
                </a>
                @if (allNames.Count > 1)
                {
                    <small style="position: relative; top: -5px;">@string.Join(", ", allNames.Skip(1))</small>
                }
                <p class="card-text">
                    <div class="container px-0">
                        <div class="row">
                            <div class="col">
                                @if (playerDetail != null)
                                {
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-star"></i>
                                        </div>
                                        <div class="col px-1">@playerDetail.Score</div>
                                    </div>
                                    @if (!LeagueMode)
                                    {
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-dollar-sign"></i>
                                            </div>
                                            <div class="col px-1">@playerDetail.Cash</div>
                                        </div>
                                    }
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-gun"></i>
                                        </div>
                                        <div class="col px-1">@playerDetail.Kills()</div>
                                    </div>
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-skull-crossbones"></i>
                                        </div>
                                        <div class="col px-1">@playerDetail.Deaths()</div>
                                    </div>
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-handshake-angle"></i>
                                        </div>
                                        <div class="col px-1">@playerDetail.Assists()</div>
                                    </div>
                                }

                                @if (ServerId != null && playerListPlayer == null && dbPlayer != null && dbPlayer.LastSeen != DateTime.MinValue)
                                {
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-calendar"></i>
                                        </div>
                                        <div class="col px-1">@dbPlayer.LastSeen.ToUniversalTime().ToString("dd.MM.yyyy HH:mm:ss") UTC</div>
                                    </div>
                                }

                                @if (ServerId != null && dbPlayer != null)
                                {
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-clock"></i>
                                        </div>
                                        <div class="col px-1">@dbPlayer.TotalTime.ToString("d\\.hh\\:mm\\:ss")</div>
                                    </div>
                                }

                                @if (playerBans != null)
                                {
                                    bool isVacBanned = false;
                                    int vac = 0;
                                    int game = 0;
                                    int daysSinceLastBan = -1;
                                    foreach (PlayerBansModel playerBan in playerBans)
                                    {
                                        if (playerBan.VACBanned)
                                        {
                                            isVacBanned = true;
                                        }

                                        vac += (int)playerBan.NumberOfVACBans;
                                        game += (int)playerBan.NumberOfGameBans;

                                        if ((daysSinceLastBan == -1 && playerBan.DaysSinceLastBan != 0) || playerBan.DaysSinceLastBan < daysSinceLastBan)
                                        {
                                            daysSinceLastBan = (int)playerBan.DaysSinceLastBan;
                                        }
                                    }

                                    @if (vac == 0 && game == 0 && daysSinceLastBan == -1)
                                    {
                                        @*<div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-shield-halved"></i>
                                            </div>
                                            <div class="col px-1">Clean record</div>
                                        </div>*@
                                    }
                                    else
                                    {
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-shield-halved"></i>
                                            </div>
                                            <div class="col px-1 @(isVacBanned ? "text-danger" : vac > 0 ? "text-warning" : "")">
                                                @($"x{vac}")
                                            </div>
                                        </div>
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-gamepad"></i>
                                            </div>
                                            <div class="col px-1 @(game > 0 ? "text-danger" : "")">
                                                @($"x{game}")
                                            </div>
                                        </div>
                                        @if (daysSinceLastBan != -1)
                                        {
                                            <div class="row gx-0">
                                                <div class="col-auto px-1">
                                                    <i class="fa-solid fa-calendar-xmark"></i>
                                                </div>
                                                <div class="col px-1">@daysSinceLastBan days</div>
                                            </div>
                                        }
                                    }
                                    @if (playerSummary != null && !string.IsNullOrEmpty(playerSummary.CountryCode))
                                    {
                                        <div class="row gx-0">
                                            @if (countryModel == null)
                                            {
                                                <div class="col-auto px-1">
                                                    <i class="fa-solid fa-earth-europe"></i>
                                                </div>
                                                <div class="col px-1">
                                                    @playerSummary.CountryCode
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="col-auto px-1">
                                                    <img src="@countryModel.FlagUrl" alt="@countryModel.Code" width="16" />
                                                </div>
                                                <div class="col px-1">
                                                    @countryModel.Name
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                                @if (connection.BanList.Contains(PlayerId) || !string.IsNullOrEmpty(dbPlayer?.BanReason))
                                {
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-gavel"></i>
                                        </div>
                                        <div class="col px-1">
                                            @(dbPlayer?.BanReason ?? "No reason specified")
                                            @if (dbPlayer?.UnbanAt == null && connection.BanList.Contains(PlayerId))
                                            {
                                                @: (Permanent)
                                            }
                                            else if (dbPlayer?.UnbanAt != null)
                                            {

                                                @: (Until @dbPlayer.UnbanAt.Value.ToString("dd.MM.yyyy HH:mm:ss") UTC)
                                            }
                                        </div>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(dbPlayer?.Comments))
                                {
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-comment-dots"></i>
                                        </div>
                                        <div class="col px-1">
                                            @dbPlayer.Comments
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="col col-auto">
                                @if (connection != null)
                                {
                                    if (playerDetail != null)
                                    {
                                        if (connection.ServerInfo is { Teams: true })
                                        {
                                            <div class="row pb-1">
                                                <div class="col">
                                                    <Confirm @ref="switchConfirm" ConfirmationChanged="confirmSwitch" ConfirmationTitle="Switch this user?" ConfirmationMessage="@($"Do you really want to switch {playerName}?")" Id="@($"switch-{PlayerId}")" />
                                                    <a class="btn btn-outline-success" style="width: 120px;" href="#" data-bs-toggle="modal" data-bs-target="#switch-@PlayerId">Switch team</a>
                                                </div>
                                            </div>
                                        }
                                        <div class="row pb-1">
                                            <div class="col">
                                                <Confirm @ref="kickConfirm" ConfirmationChanged="confirmKick" ConfirmationTitle="Kick this user?" ConfirmationMessage="@($"Do you really want to kick {playerName}?")" Id="@($"kick-{PlayerId}")" />
                                                <a class="btn btn-outline-warning" style="width: 120px;" href="#" data-bs-toggle="modal" data-bs-target="#kick-@PlayerId">Kick</a>
                                            </div>
                                        </div>
                                    }

                                    <div class="row pb-1">
                                        <div class="col">
                                            @if (connection.BanList?.Contains(PlayerId) ?? false)
                                            {
                                                <Confirm @ref="unbanConfirm" ConfirmationChanged="confirmUnban" ConfirmationTitle="Unban this user?" ConfirmationMessage="@($"Do you really want to unban {playerName}?")" Id="@($"unban-{PlayerId}")" />
                                                <a class="btn btn-outline-danger" style="width: 120px;" href="#" data-bs-toggle="modal" data-bs-target="#unban-@PlayerId">Unban</a>
                                            }
                                            else
                                            {
                                                <BanConfirm @ref="banConfirm" ConfirmationChanged="confirmBan" ConfirmationTitle="Ban this user?" ConfirmationMessage="@($"Do you really want to ban {playerName}?")" Id="@($"ban-{PlayerId}")" />
                                                <a class="btn btn-outline-danger" style="width: 120px;" href="#" data-bs-toggle="modal" data-bs-target="#ban-@PlayerId">Ban</a>
                                            }
                                        </div>
                                    </div>
                                }
                                @if (dbPlayer != null)
                                {
                                    <div class="row pb-1">
                                        <div class="col">
                                            <PlayerComments Id="@($"comments-{PlayerId}")" PlayerId="@PlayerId" PlayerName="@playerName" ServerId="@ServerId" />
                                            <a class="btn btn-outline-secondary" style="width: 120px;" href="#" data-bs-toggle="modal" data-bs-target="#comments-@PlayerId">Comments</a>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </p>
            </div>
        </div>
    </div>
</div>

@code {

    private const bool seperateConnection = false;

    [Parameter]
    public string? ServerId { get; set; } = null;

    [Parameter]
    [EditorRequired]
    public ulong PlayerId { get; set; }

    [Parameter]
    public bool LeagueMode { get; set; } = false;

    private CountryModel? countryModel;

    private BanConfirm banConfirm { get; set; }
    private Confirm unbanConfirm { get; set; }
    private Confirm kickConfirm { get; set; }
    private Confirm switchConfirm { get; set; }

    private async Task confirmBan(BanConfirmEventArgumentsModel banConfirmArgs)
    {
        if (!banConfirmArgs.Confirmed)
        {
            return;
        }

        await ban(banConfirmArgs.Reason, banConfirmArgs.Duration);
    }

    private async Task confirmUnban(bool confirmed)
    {
        if (!confirmed)
        {
            return;
        }

        await unban();
    }

    private async Task confirmKick(bool confirmed)
    {
        if (!confirmed)
        {
            return;
        }

        await kick();
    }

    private async Task confirmSwitch(bool confirmed)
    {
        if (!confirmed)
        {
            return;
        }

        await switchTeam();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!PlayersState.Value.PlayerSummaries.ContainsKey(PlayerId))
        {
            await Task.Run(() => Dispatcher.Dispatch(new PlayersLoadSummaryAction(PlayerId)));
        }
        else
        {
            updateCountry();
        }

        if (!PlayersState.Value.PlayerBans.ContainsKey(PlayerId))
        {
            await Task.Run(() => Dispatcher.Dispatch(new PlayersLoadBansAction(PlayerId)));
        }

        await base.OnParametersSetAsync();
    }

    private async void updateCountry()
    {
        if (countryModel != null || !PlayersState.Value.PlayerSummaries.ContainsKey(PlayerId))
        {
            return;
        }

        PlayerSummaryModel summary = PlayersState.Value.PlayerSummaries[PlayerId];
        if (string.IsNullOrEmpty(summary.CountryCode))
        {
            return;
        }

        try
        {
            countryModel = await CountryService.GetCountry(PlayersState.Value.PlayerSummaries[PlayerId].CountryCode);
        }
        catch { }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Rcon.OnServersUpdated += refresh;
    }

    private async void refresh()
    {
        updateCountry();

        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        Rcon.OnServersUpdated -= refresh;
    }

    private async Task switchTeam()
    {
        if (ServerId == null)
        {
            Toast.ShowError("Can not switch player that is not associated with a server");
            return;
        }

        PavlovRconConnection? connection = Rcon.GetServer(ApiKey.ApiKey, ServerId);

        if (connection == null)
        {
            Toast.ShowError("Server is not available");
            return;
        }

        PlayerDetail? playerDetail = null;
        if (connection is { PlayerDetails: IReadOnlyDictionary<ulong, PlayerDetail> playerDetails, })
        {
            playerDetails.TryGetValue(PlayerId, out playerDetail);
        }

        if (playerDetail == null)
        {
            Toast.ShowError("Can not switch player that has an unknown team");
            return;
        }

        try
        {
            await RconService.SwitchTeam(ApiKey.ApiKey, ServerId, playerDetail.UniqueId, playerDetail.TeamId == 0 ? 1 : 0, seperateConnection);
            Toast.ShowSuccess("Player has been switched!");

            await AuditService.Add(ServerId, $"Switched team of player {PlayerId} from {playerDetail.TeamId}");
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message, "Error during team switch");
        }
    }

    private async Task kick()
    {
        if (ServerId == null)
        {
            Toast.ShowError("Can not kick player that is not associated with a server");
            return;
        }

        PavlovRconConnection? connection = Rcon.GetServer(ApiKey.ApiKey, ServerId);
        if (connection == null)
        {
            Toast.ShowError("Server must be online to kick a player");
            return;
        }

        try
        {
            if (await RconService.KickPlayer(ApiKey.ApiKey, ServerId, PlayerId, seperateConnection))
            {
                Toast.ShowWarning("Player has been kicked!");
                await AuditService.Add(ServerId, $"Kicked player {PlayerId}");
            }
            else
            {
                Toast.ShowError("Server refused to kick player");
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message, "Error during kick");
        }
    }

    private async Task ban(string? reason, int duration)
    {
        if (ServerId == null)
        {
            Toast.ShowError("Can not ban player that is not associated with a server");
            return;
        }

        PavlovRconConnection? connection = Rcon.GetServer(ApiKey.ApiKey, ServerId);
        if (connection == null)
        {
            // TODO: not technically true, implement fallback to editing banlist.txt
            Toast.ShowError("Server must be online to ban a player");
            return;
        }

        try
        {
            if (await RconService.BanPlayer(ApiKey.ApiKey, ServerId, PlayerId, seperateConnection))
            {
                Toast.ShowWarning("Player has been banned!");

                if (string.IsNullOrEmpty(reason))
                {
                    reason = "No reason given";
                }

                await AuditService.Add(ServerId, $"Banned player {PlayerId} for reason \"{reason}\" and duration {duration}s");

                using (PavlovServerContext pavlovServerContext = new(Configuration))
                {
                    PersistentPavlovPlayerModel? dbPlayer = await pavlovServerContext.Players.FirstOrDefaultAsync(p => p.UniqueId == PlayerId && p.ServerId == ServerId);
                    if (dbPlayer == null)
                    {
                        dbPlayer = new PersistentPavlovPlayerModel()
                            {
                                ServerId = ServerId,
                                UniqueId = PlayerId
                            };
                        pavlovServerContext.Players.Add(dbPlayer);
                    }
                    dbPlayer.BanReason = reason;
                    if (duration != -1)
                    {
                        dbPlayer.UnbanAt = DateTime.Now.AddSeconds(duration);
                    }
                    await pavlovServerContext.SaveChangesAsync();
                }
            }
            else
            {
                Toast.ShowError("Server refused to ban player");
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message, "Error during ban");
        }
    }

    private async Task unban()
    {
        if (ServerId == null)
        {
            // TODO: not technically true, implement fallback to editing banlist.txt
            Toast.ShowError("Can not unban player that is not associated with a server");
            return;
        }

        PavlovRconConnection? connection = Rcon.GetServer(ApiKey.ApiKey, ServerId);
        if (connection == null)
        {
            Toast.ShowError("Server must be online to unban a player");
            return;
        }

        try
        {
            if (await RconService.UnbanPlayer(ApiKey.ApiKey, ServerId, PlayerId, seperateConnection))
            {
                Toast.ShowSuccess("Player has been unbanned!");
                await AuditService.Add(ServerId, $"Unbanned player {PlayerId}");

                using (PavlovServerContext pavlovServerContext = new(Configuration))
                {
                    PersistentPavlovPlayerModel? dbPlayer = await pavlovServerContext.Players.FirstOrDefaultAsync(p => p.UniqueId == PlayerId && p.ServerId == ServerId);
                    if (dbPlayer != null)
                    {
                        dbPlayer.UnbanAt = null;
                        await pavlovServerContext.SaveChangesAsync();
                    }
                }
            }
            else
            {
                Toast.ShowError("Server refused to unban player");
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message, "Error during unban");
        }
    }
}