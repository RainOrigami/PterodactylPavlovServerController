@page "/maps/{ServerId}"
@using Fluxor;
@using Microsoft.EntityFrameworkCore;
@using PavlovVR_Rcon.Models.Pavlov;
@using PterodactylPavlovServerController.Contexts;
@using PterodactylPavlovServerController.Models;
@using PterodactylPavlovServerController.Services;
@using PterodactylPavlovServerController.Stores;
@using PterodactylPavlovServerDomain.Models;
@inject IDispatcher Dispatcher
@inject IState<MapsState> MapsState
@inject PavlovServerService PavlovServerService
@inject ApiKeyService ApiKey
@inject SteamWorkshopService SteamWorkshopService
@inject IConfiguration Configuration
@inject IToastService Toast
@inject AuditService AuditService

@if (string.IsNullOrEmpty(ServerId))
{
    @:Loading...
    return;
}

@{
    Dispatcher.Dispatch(new PageTitleSetAction($"Maps on {serverName}"));
}

<div style="width: 385px;">
    Load a saved map rotation:<br />
    <EditForm Model="@setMapRotationModel" OnValidSubmit="@setMapRotation">
        <InputSelect @bind-Value="@setMapRotationModel.Name" class="form-select">
            @if (storedMapRotations == null)
            {
                <option selected disabled>Loading...</option>
            }
            else
            {
                <option selected disabled>Select a rotation</option>
                @foreach (MapRotationModel mapRotation in storedMapRotations)
                {
                    <option value="@mapRotation.Name">@mapRotation.Name (@mapRotation.Maps.Count maps)</option>
                }
            }
        </InputSelect>
        <button type="submit" class="btn btn-outline-success form-control mt-1">Load</button>
    </EditForm>
</div>

<div>
    <h4 class="mt-3">Current rotation</h4>

    <div>
        Drag and drop to reorder.<br />
        Rotation:
        @if (currentRotationModel == null)
        {
            @:Unsaved rotation
        }
        else
        {
            @currentRotationModel.Name
        }
        <br />
        <button class="btn btn-outline-warning form-control my-1" style="width: 385px;" @onclick="@(() => clear())">New empty rotation</button>
    </div>
    <div>
        @if (currentRotation == null)
        {
            @:Loading...
        }
        else
        {
            <table class="table table-striped table-dark table-hover" ondragover="event.preventDefault();">
                <thead>
                    <tr>
                        <th nowrap>Map Name</th>
                        <th nowrap>Game Mode</th>
                        <th width="100%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (ServerMapModel serverMap in currentRotation)
                    {
                        <tr draggable="true" @ondrop="@(() => drop(serverMap))" @ondrag="@(() => drag(serverMap))">
                            <td nowrap class="py-0">
                                @{
                                    MapWorkshopModel? mapDetail = null;
                                    if (serverMap.IsWorkshopMap)
                                    {
                                        <a href="@serverMap.Url" target="_blank" class="fw-bold text-info">
                                            @if (MapsState.Value.MapDetails.TryGetValue(serverMap.WorkshopId, out mapDetail))
                                            {
                                                @:@mapDetail.Name
                                            }
                                            else
                                            {
                                                @:Loading...
                                            }
                                        </a>
                                    }
                                    else
                                    {
                                        @serverMap.MapLabel
                                    }
                                    <br />
                                    <span class="small text-light">@serverMap.MapLabel</span>
                                }
                            </td>
                            <td nowrap class="py-0" style="vertical-align: middle;">@serverMap.GameMode</td>
                            <td class="py-0">
                                <span>
                                    <button class="btn btn-link text-info" @onclick="@(() => remove(serverMap))"><i class="fa-solid fa-trash-can"></i></button>
                                </span>
                                <div class="btn-group-vertical" role="group">
                                    <button class="btn btn-link text-info p-0" @onclick="@(() => move(serverMap, -1))"><i class="fa-solid fa-circle-chevron-up"></i></button>
                                    <button class="btn btn-link text-info p-0" @onclick="@(() => move(serverMap, 1))"><i class="fa-solid fa-circle-chevron-down"></i></button>
                                </div>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td colspan="3">
                            <EditForm Model="@addMapModel" OnValidSubmit="@addMap" style="width: 385px;">
                                <InputText @bind-Value="addMapModel.Map" class="form-control mb-1" placeholder="Map name, ID or workshop URL"></InputText>
                                <InputSelect @bind-Value="addMapModel.GameMode" class="form-select mb-1">
                                    <option selected disabled>Select a game mode</option>
                                    @foreach (GameMode gameMode in Enum.GetValues(typeof(GameMode)))
                                    {
                                        <option value="@gameMode">@gameMode</option>
                                    }
                                </InputSelect>
                                <button type="submit" class="btn btn-outline-success form-control">Add map</button>
                            </EditForm>
                        </td>
                    </tr>
                </tbody>
            </table>
            <input type="text" @bind-value="@rotationName" placeholder="Rotation name" style="width: 385px;" class="form-control" />
            <br />
            <button class="btn btn-primary mb-3" @onclick="apply">Apply</button>
            <button class="btn btn-success mb-3" @onclick="applyAndSave">Apply and save</button>
            <button class="btn btn-primary mb-3" @onclick="save">Save</button>
        }
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public string ServerId { get; set; } = string.Empty;

    private string serverName = string.Empty;

    private MapRotationModel[]? storedMapRotations = null;
    private ServerMapModel[]? currentRotation = null;
    private MapRotationModel? currentRotationModel = null;
    private string rotationName = string.Empty;

    private readonly SetMapRotationModel setMapRotationModel = new();
    private readonly MapChangeInputModel addMapModel = new();

    protected override async Task OnParametersSetAsync()
    {
        await initialise();

        await base.OnParametersSetAsync();
    }

    private async Task initialise()
    {
        if (ServerId == null)
        {
            return;
        }

        serverName = await PavlovServerService.GetServerName(ApiKey.ApiKey, ServerId);

        PavlovServerContext pavlovServerContext = new(Configuration);
        storedMapRotations = await pavlovServerContext.MapRotations.Where(r => r.ServerId == ServerId).Include(r => r.Maps).ToArrayAsync();

        currentRotation = await PavlovServerService.GetCurrentMapRotation(ApiKey.ApiKey, ServerId);
        currentRotationModel = storedMapRotations.FirstOrDefault(r => r.MapsInRotation?.OrderBy(m => m.Order).Select(m => m.Map).SequenceEqual(currentRotation, new ServerMapModel()) ?? false);
        if (currentRotationModel != null)
        {
            rotationName = currentRotationModel.Name;
        }

        foreach (ServerMapModel serverMap in storedMapRotations.SelectMany(r => r.Maps).Union(currentRotation).Distinct())
        {
            MapWorkshopModel? mapDetail = null;
            if (serverMap.IsWorkshopMap)
            {
                if (!MapsState.Value.MapDetails.TryGetValue(serverMap.WorkshopId, out mapDetail))
                {
                    Dispatcher.Dispatch(new MapsLoadWorkshopAction(serverMap.WorkshopId));
                }
            }
        }
    }

    private async Task setMapRotation()
    {
        if (string.IsNullOrEmpty(setMapRotationModel.Name))
        {
            return;
        }

        MapRotationModel mapRotation = storedMapRotations!.First(r => r.Name == setMapRotationModel.Name);
        currentRotationModel = mapRotation;
        currentRotation = mapRotation.MapsInRotation?.OrderBy(m => m.Order).Select(m => m.Map).ToArray();
        rotationName = mapRotation.Name;

        await Task.CompletedTask;
    }

    private int currentIndex;

    private void drag(ServerMapModel model)
    {
        currentIndex = Array.IndexOf(currentRotation!, model);
    }

    private void drop(ServerMapModel model)
    {
        int newIndex = Array.IndexOf(currentRotation!, model);
        ServerMapModel currentMap = currentRotation![currentIndex];

        List<ServerMapModel> newRotation = currentRotation.ToList();
        newRotation.RemoveAt(currentIndex);
        newRotation.Insert(newIndex, currentMap);
        currentRotation = newRotation.ToArray();

        currentIndex = newIndex;

        StateHasChanged();
    }

    private void move(ServerMapModel model, int relative)
    {
        int currentIndex = Array.IndexOf(currentRotation!, model);
        List<ServerMapModel> newRotation = currentRotation!.ToList();
        newRotation.RemoveAt(currentIndex);
        newRotation.Insert(Math.Clamp(currentIndex + relative, 0, currentRotation!.Length - 1), model);
        currentRotation = newRotation.ToArray();
    }

    private void remove(ServerMapModel model)
    {
        List<ServerMapModel> newRotation = currentRotation!.ToList();
        newRotation.RemoveAt(Array.IndexOf(currentRotation!, model));
        currentRotation = newRotation.ToArray();
    }

    private async Task applyAndSave()
    {
        await apply();

        if (string.IsNullOrEmpty(rotationName))
        {
            return;
        }

        await save();
    }

    private async Task apply()
    {
        await PavlovServerService.ApplyMapList(ApiKey.ApiKey, ServerId, currentRotation!);

        Toast.ShowSuccess("Rotation applied to server");

        await AuditService.Add(ServerId, $"Applied map rotation: {string.Join(',', currentRotation!.Select(r => $"{r.MapLabel} ({r.GameMode})"))}");
    }

    private async Task save()
    {
        PavlovServerContext pavlovServerContext = new(Configuration);

        List<MapInMapRotationModel> mapsInRotation = new();
        List<ServerMapModel> dbMaps = new();

        foreach (ServerMapModel newRotationMap in currentRotation!)
        {
            if ((await pavlovServerContext.Maps.FirstOrDefaultAsync(m => m.MapLabel == newRotationMap.MapLabel && m.GameMode == newRotationMap.GameMode)) is ServerMapModel targetMap)
            {
                dbMaps.Add(targetMap);
            }
            else
            {
                pavlovServerContext.Maps.Add(newRotationMap);
                dbMaps.Add(newRotationMap);
            }
        }

        if (pavlovServerContext.MapRotations.Include(r => r.Maps).FirstOrDefault(r => r.ServerId == ServerId && r.Name == rotationName) is MapRotationModel targetMapRotation)
        {
            targetMapRotation.Maps.Clear();
            if (targetMapRotation.MapsInRotation == null)
            {
                targetMapRotation.MapsInRotation = new List<MapInMapRotationModel>();
            }
            targetMapRotation.MapsInRotation.Clear();
        }
        else
        {
            targetMapRotation = new MapRotationModel()
                {
                    ServerId = ServerId,
                    Name = rotationName,
                    MapsInRotation = new List<MapInMapRotationModel>()
                };

            pavlovServerContext.MapRotations.Add(targetMapRotation);
        }

        int order = 0;
        foreach (ServerMapModel newRotationMap in dbMaps)
        {
            targetMapRotation.MapsInRotation.Add(new MapInMapRotationModel()
                {
                    Map = newRotationMap,
                    Rotation = targetMapRotation,
                    Order = order++
                });
        }

        await pavlovServerContext.SaveChangesAsync();

        Toast.ShowSuccess($"Rotation saved as \"{rotationName}\"");
        await AuditService.Add(ServerId, $"Saved map rotation as \"{rotationName}\": {string.Join(',', currentRotation!.Select(r => $"{r.MapLabel} ({r.GameMode})"))}");
        await initialise();
    }


    private async Task addMap()
    {
        if (addMapModel.MapLabel == null || addMapModel.GameMode == null)
        {
            Toast.ShowError("Map label and game mode are required for a map change");
            return;
        }

        string mapName = addMapModel.MapLabel;
        if (addMapModel.IsWorkshopMap)
        {
            mapName = SteamWorkshopService.GetMapDetail(addMapModel.MapId!.Value).Name;
        }

        List<ServerMapModel> newRotation = currentRotation?.ToList() ?? new();
        newRotation.Add(new ServerMapModel()
            {
                GameMode = addMapModel.GameMode.ToString()!,
                MapLabel = addMapModel.MapLabel
            });
        currentRotation = newRotation.ToArray();

        await Task.CompletedTask;
    }

    private void clear()
    {
        this.currentRotation = Array.Empty<ServerMapModel>();
        this.currentRotationModel = null;
        this.rotationName = string.Empty;
    }
}
